// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "match_server/Match.h"
#include "save_client/Save.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TSocket.h>
#include <thrift/transport/TTransportUtils.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <queue>
#include <vector>
#include <unistd.h>
#include <cmath>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/ThreadFactory.h>
#include <thrift/server/TThreadPoolServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/TToString.h>
using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace ::match_service;
using namespace ::save_service;
using namespace std;

struct Task{
    User user;
    string type;
};

struct MassageQueue{
    queue<Task> q;
    mutex m;
    condition_variable cv;
}message_queue;

class Pool{
    public:
        void save_result(int a,int b){
            cout<<"Match Result: "<<a<<" "<<b<<endl;
            std::shared_ptr<TTransport> socket(new TSocket("123.57.47.211", 9090));
            std::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
            std::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
            SaveClient client(protocol);

            try {
                transport->open();

                int res = client.save_data("acs_4270","34e5668c",a,b);

                if(!res)puts("success");
                else puts("failed");

                transport->close();
            } catch (TException& tx) {
                cout << "ERROR: " << tx.what() << endl;
            }
        }
        bool check_match(uint32_t i,uint32_t j)
        {
            auto a=users[i],b=users[j];
            int dis = abs(a.score-b.score);
            return dis<=wt[i]*50&&dis<=wt[j]*50;
        }
        void match(){
            //等待时间++
            for(uint32_t i=0;i<wt.size();i++) wt[i]++;
            while(users.size()>1){
                /*
                 *直接匹配前两个-- 不合理 应当考虑分差 等待时间等因素
                 * auto a = users[0],b=users[1];
                 users.erase(users.begin());
                 users.erase(users.begin());*/

                bool flag=true;
                for(uint32_t i = 0;i<users.size();i++){
                    for(uint32_t j = i+1;j<users.size();j++){
                    if(check_match(i,j)){
                    auto a=users[i],b=users[j];
                    users.erase(users.begin()+j);
                    users.erase(users.begin()+i);
                    wt.erase(wt.begin()+j);
                    wt.erase(wt.begin()+i);//先删后面的，再删前面的
                    save_result(a.id,b.id);
                    flag=false;
                    break;//发生匹配，立即退出，从头开始进行下一次匹配
                    }
                    }
                    if(!flag)break;//匹配成功
                }
                if(flag)break;//所有的都没有一对匹配成功的
            }
        }
        void add(User user){
            users.push_back(user);
            wt.push_back(0);
        }
        void remove(User user){
            for(uint32_t i = 0 ; i<users.size();i++){
                if(users[i].id== user.id){
                    users.erase(users.begin()+i);
                    wt.erase(wt.begin()+i);
                    break;
                }
            }
        }
    private:
        vector<User> users;
        vector<int> wt;

}pool;


class MatchHandler : virtual public MatchIf {
    public:
        MatchHandler() {
            // Your initialization goes here
        }

        int32_t add_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("add_user\n");
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"add"});
            message_queue.cv.notify_all();//唤醒所有被cv卡住的线程
            return 0;
        }

        int32_t remove_user(const User& user, const std::string& info) {
            // Your implementation goes here
            printf("remove_user\n");
            unique_lock<mutex> lck(message_queue.m);
            message_queue.q.push({user,"rm"});
            message_queue.cv.notify_all();
            return 0;
        }

};

void consume_task(){
    while(true){
        unique_lock<mutex> lck(message_queue.m);
        if(message_queue.q.empty()){
            //message_queue.cv.wait(lck);
            lck.unlock();
            pool.match();
            sleep(1);//每一秒匹配一次
        }
        else{
            auto task = message_queue.q.front();
            message_queue.q.pop();
            lck.unlock();
            //do task
            if(task.type=="add")pool.add(task.user);
            else if(task.type=="rm") pool.remove(task.user);


        }

    }
}
class MatchCloneFactory : virtual public MatchIfFactory {
    public:
        ~MatchCloneFactory() override = default;
        MatchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) override
        {
            std::shared_ptr<TSocket> sock = std::dynamic_pointer_cast<TSocket>(connInfo.transport);
            /*
             ****本段输出内容为连接的一些信息，可根据情况使用****
            cout << "Incoming connection\n";
            cout << "\tSocketInfo: "  << sock->getSocketInfo() << "\n";
            cout << "\tPeerHost: "    << sock->getPeerHost() << "\n";
            cout << "\tPeerAddress: " << sock->getPeerAddress() << "\n";
            cout << "\tPeerPort: "    << sock->getPeerPort() << "\n";
            */
            return new MatchHandler;
        }
        void releaseHandler(MatchIf* handler) override {
            delete handler;
        }
};
int main(int argc, char **argv) {
    TThreadedServer server(
            std::make_shared<MatchProcessorFactory>(std::make_shared<MatchCloneFactory>()),
            std::make_shared<TServerSocket>(9090), //port
            std::make_shared<TBufferedTransportFactory>(),
            std::make_shared<TBinaryProtocolFactory>());

    cout<<"Start Match Server"<<endl;

    thread matching_thread(consume_task);

    server.serve();
    return 0;
}

